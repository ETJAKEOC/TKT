name: Build Ubuntu kernel
on:
  workflow_call:
    inputs:
      _cpusched:
        required: true
        type: string
      compiler:
        required: true
        type: string

env:
  _processor_opt: "x86-64"
  _distro: "Ubuntu"
  _git_mirror: "gregkh"
  _logging_use_script: "no"
  _install_after_building: "no"
  _debugdisable: "true"
  _noccache: "true"
  _STRIP: "true"
  _kernel_on_diet: "true"
  _nofallback: "false"

jobs:
  build-kernel:
    env:
      _cpusched: ${{ inputs._cpusched }}
      compiler: ${{ inputs.compiler }}

    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies and cleanup
        run: |
          # Ensure all repo types are enabled
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list
          for file in /etc/apt/sources.list.d/*.list; do
            sudo sed -i 's/^# deb/deb/g' "$file" || true
          done

          # Add all default Ubuntu repositories
          sudo add-apt-repository main
          sudo add-apt-repository universe
          sudo add-apt-repository multiverse
          sudo add-apt-repository restricted
          sudo apt update

          # Core dev tools + Clang toolchain + GCC family
          sudo apt install -y \
          bc binutils binutils-dev binutils-gold bison build-essential ccache clang clang-15 clang-format clang-tidy clang-tools \
          cmake cpio curl debhelper device-tree-compiler dpkg-dev dwarves fakeroot flex g++ g++-multilib gcc gcc-multilib \
          git gnupg kmod libc6-dev libc6-dev-i386 libdw-dev libelf-dev liblz4-tool libncurses-dev libnuma-dev libperl-dev \
          libssl-dev libstdc++-14-dev libudev-dev llvm llvm-15 lld lz4 make ninja-build patchutils python3 python3-pip python3-setuptools \
          qtbase5-dev rsync schedtool software-properties-common wget zstd

          # Link Clang versions for consistent use
          sudo ln -sf /usr/bin/clang-15 /usr/bin/clang
          sudo ln -sf /usr/bin/clang++-15 /usr/bin/clang++
          sudo ln -sf /usr/bin/clang-cpp-15 /usr/bin/clang-cpp

          sudo rm -rf /var/cache/apt/archives/*

      - name: Checkout TKT
        uses: actions/checkout@v4

      - name: Adjust compiler and compile Kernel
        env:
          _cpusched: ${{ inputs._cpusched }}
          compiler: ${{ inputs.compiler }}
          CC: x86_64-pc-linux-gnu
        run: |
          git config --global --add safe.directory `pwd`
          if [ "${{ inputs.compiler }}" = "llvm" ] || [ "${{ inputs.compiler }}" = "clang" ]; then
            export KCFLAGS="$KCFLAGS -Wold-style-declaration"
          fi
          sed -i 's/^_compiler=".*"/_compiler="${{ inputs.compiler }}"/' customization.cfg
          set +o pipefail
          yes '' | ./install.sh install || true
          set -o pipefail

      - name: Cleanup useless DEB files
        run: rm -rf DEBS/*dbg*.deb DEBS/*libc-dev*.deb

      - name: Rename DEB files to $arch-linux format
        run: |
          arch=$(uname -m)
          for file in DEBS/linux*.deb; do
            base=$(basename "$file")
            mv "$file" "DEBS/Ubuntu-linux-${arch}-${base#linux-}"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-kernel-packages-${{ env._cpusched }}-${{ inputs.compiler }}
          path: DEBS/*.deb

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          tag_name: ${{ github.ref_name }}
          name: "Ubuntu Kernel Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: DEBS/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
